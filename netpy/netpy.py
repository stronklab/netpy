from multiprocessing import Process
from sys import argv
from itertools import imap

from butterfly import *

import aaargh

app = aaargh.App(description="`Distributed` computing of network usage")
settings(port=39512, viewport=8123)
p = 21149111429113253367590715550208065048364045615883465049221463353582785946636066002190382444070089762859279857395242951620048113362819760520999588998021951154315419803715957929875772100055557304948720614987743264415782553958778021767677290334439971452337264199692076583493923809854027487109725278076166710152154887196655773047788219062931948172461580249150914817873536210188592282184061388550401161568392737696202275660068350566913571855240207361776445898926261889470283274479085148514768295998035073585700933785495148561851552267227644811387183233780868107236775765976415460209513045066958779511413106277989687339119L
a = 123947622835061716225536305706845486347266718611978672607865509130438453808120607806845658558078175204891808599904789264801390011533416024413008128294527L


class ServeObserver:
    @property
    def progress(self):
        return float(len(self.complete))/self.count_tasks

    def get(self):
        self.write("Hello!<br/>")
        self.write("Currently complete %.2f%%" % self.progress)


class WorkerObserver:
    def get(self):
        self.write("Not implemented")


@app.cmd
@app.cmd_arg("-o", "--observer", action="store_const", const=True, help="Start observer of tasks completing")
@server.spawn(ServeObserver)
def serve():
    for i in xrange(10000, 20000):
        yield (i,), {}


@app.cmd
@app.cmd_arg("-c", "--count", type=int, default=1, help="Count of serving workers")
@app.cmd_arg("-s", "--server", type=str, default="localhost", help="Remote server's ip")
@app.cmd_arg("-o", "--observer", action="store_const", const=True, help="Start observer of tasks completing")
@client.spawn(WorkerObserver)
def worker(k):
    return bin(a**k % 21149111429113253367590715550208065048364045615883465049221463353582785946636066002190382444070089762859279857395242951620048113362819760520999588998021951154315419803715957929875772100055557304948720614987743264415782553958778021767677290334439971452337264199692076583493923809854027487109725278076166710152154887196655773047788219062931948172461580249150914817873536210188592282184061388550401161568392737696202275660068350566913571855240207361776445898926261889470283274479085148514768295998035073585700933785495148561851552267227644811387183233780868107236775765976415460209513045066958779511413106277989687339119L).count("1")


if __name__ == "__main__":
    app.run()